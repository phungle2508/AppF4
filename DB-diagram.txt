Database Table Diagram: https://dbdiagram.io/d/67d84bd475d75cc84466c804

---

## **1Ô∏è‚É£ Microservices Overview**
Each core feature should be handled by a separate microservice with its own database. Some services can share a database if necessary, but ideally, each should be **loosely coupled**.

| **Microservice**        | **Responsibilities**                             | **Database**     |
|------------------------|-------------------------------------------------|-----------------|
| **Auth Service**       | User authentication, authorization, JWT, OAuth2  | MySQL (users, roles) |
| **User Service**       | Profile management, followers/following         | MySQL (profiles, relations) |
| **Post Service**       | Post creation, editing, media storage           | MySQL (posts, media) |
| **Comment Service**    | Comments, replies, reactions on comments        | MySQL (comments, reactions) |
| **Reaction Service**   | Likes and reactions tracking                    | MySQL (reactions) |
| **Notification Service** | Real-time & push notifications                  | Redis / Kafka |
| **Search Service**     | Search users, posts, and topics                 | Elasticsearch / OpenSearch |

Each microservice should expose **RESTful APIs (or GraphQL/WebSockets)** for communication.

---

## **2Ô∏è‚É£ Database Schema (MySQL)**
Each microservice has its own database schema.

### **üõ°Ô∏è Auth Service (Authentication & Authorization)**
```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    oauth_provider ENUM('google', 'facebook', 'github', 'local') DEFAULT 'local',
    oauth_id VARCHAR(255) NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE roles (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name ENUM('admin', 'user', 'moderator') UNIQUE NOT NULL
);

CREATE TABLE user_roles (
    user_id BIGINT,
    role_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);
```

### **üë§ User Service (Profile & Social)**
```sql
CREATE TABLE profiles (
    user_id BIGINT PRIMARY KEY,
    full_name VARCHAR(255),
    bio TEXT,
    profile_picture VARCHAR(255),
    status ENUM('active', 'inactive', 'banned') DEFAULT 'active',
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE follows (
    follower_id BIGINT,
    following_id BIGINT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (follower_id, following_id),
    FOREIGN KEY (follower_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (following_id) REFERENCES users(id) ON DELETE CASCADE
);
```

### **üìù Post Service (Posts & Media)**
```sql
CREATE TABLE posts (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    content TEXT,
    media_url VARCHAR(255) NULL,
    is_private BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```

### **üí¨ Comment Service**
```sql
CREATE TABLE comments (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    post_id BIGINT,
    user_id BIGINT,
    parent_comment_id BIGINT NULL,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (parent_comment_id) REFERENCES comments(id) ON DELETE CASCADE
);
```

### **‚ù§Ô∏è Reaction Service**
```sql
CREATE TABLE reactions (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    post_id BIGINT NULL,
    comment_id BIGINT NULL,
    reaction_type ENUM('like', 'love', 'haha', 'sad', 'angry'),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (comment_id) REFERENCES comments(id) ON DELETE CASCADE
);
```

### **üîî Notification Service (Using Kafka / Redis)**
- **Table-based backup for persistent notifications:**
```sql
CREATE TABLE notifications (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT,
    message TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
```
- **Real-time notifications handled using Kafka / WebSockets.**

### **üîç Search Service (Using Elasticsearch)**
Instead of storing search data in MySQL, store it in **Elasticsearch**:
- Index **users**, **posts**, and **hashtags**.
- Keep MySQL as the source of truth and sync updates using **event-driven architecture**.

---

## **3Ô∏è‚É£ Microservices Communication**
Since **each service has its own database**, they need a way to communicate:

1. **Synchronous (REST / gRPC)**
   - User Service ‚Üí Auth Service (`GET /users/{id}`)
   - Post Service ‚Üí User Service (`GET /profiles/{id}`)
   
2. **Asynchronous (Kafka / RabbitMQ)**
   - **New Post Event** ‚Üí Notifies followers via **Notification Service**
   - **New Reaction Event** ‚Üí Updates analytics in **Engagement Metrics Service**
   - **Deleted User Event** ‚Üí Removes all posts, comments, and notifications related to the user.

---

## **4Ô∏è‚É£ Optimizations & Best Practices**
‚úî **Use read-replicas** for MySQL to scale read-heavy operations.  
‚úî **Use caching (Redis)** for frequently accessed data (e.g., user profiles).  
‚úî **Sharding strategy** for large datasets (e.g., partitioning posts table).  
‚úî **Elasticsearch sync** with a change-data-capture (CDC) mechanism.  
‚úî **Secure API gateways** with rate-limiting and JWT authentication.  

---
